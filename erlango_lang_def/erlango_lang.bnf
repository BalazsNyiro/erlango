<module> ::= <moduleDeclaration> <functionClauses>

<moduleDeclaration> ::= "module" "(" <moduleName> ")" "."

<moduleName> ::= <smallLetter> <identifierTail>*

<functionClauses> ::= <functionClause> (";" <functionClause>)* "."

<functionClause> ::= <functionName> "(" <parameterList> ")" <guardClause>? "->" <expressionPrecedenceLevel_0>

<functionName> ::= <smallLetter> <identifierTail>*

<parameterList> ::= <parameter> ("," <parameter>)* | /* empty */

<parameter> ::= <pattern>

<guardClause> ::= "when" <guardExpression>

<guardExpression> ::= <guardExpression> "," <guardTerm>
                    | <guardTerm>

<guardTerm> ::= <expressionPrecedenceLevel_0>

<expressionPrecedenceLevel_0> ::= <expressionPrecedenceLevel_0> "+" <expressionPrecedenceLevel_1>
                               |  <expressionPrecedenceLevel_0> "-" <expressionPrecedenceLevel_1>
                               |  <expressionPrecedenceLevel_1>

<expressionPrecedenceLevel_1> ::= <expressionPrecedenceLevel_1> "*" <expressionPrecedenceLevel_2>
                               |  <expressionPrecedenceLevel_1> "/" <expressionPrecedenceLevel_2>
                               |  <expressionPrecedenceLevel_2>

<expressionPrecedenceLevel_2> ::= <unaryExpression>

<unaryExpression> ::= "+" <unaryExpression>
                    |  "-" <unaryExpression>
                    |  <primaryExpression>

<primaryExpression> ::= "(" <expressionPrecedenceLevel_0> ")"
                      |  <literal>
                      |  <variable>
                      |  <functionCall>
                      |  <list>
                      |  <tuple>
                      |  <map>
                      |  <binary>
                      |  <pid>
                      |  <port>
                      |  <reference>
                      |  <funExpression>
                      |  <ifExpression>
                      |  <caseExpression>

<literal> ::= <integer> | <float> | <string> | <atom>

<functionCall> ::= <functionName> "(" <argumentList> ")"

<argumentList> ::= <expressionPrecedenceLevel_0> ("," <expressionPrecedenceLevel_0>)* | /* empty */

<pattern> ::= <literal> 
            | <variable>
            | <listPattern>
            | <tuplePattern>
            | <mapPattern>
            | <wildcardPattern>
            | <consPattern>
            | <literal> 
            | <patternVariable>
            | <functionPattern>

<listPattern> ::= "[" (<pattern> ("," <pattern>)*)? "]"

<tuplePattern> ::= "{" (<pattern> ("," <pattern>)*)? "}"

<mapPattern> ::= "#{" (<pattern> "=>" <pattern> ("," <pattern> "=>" <pattern>)*)? "}"

<wildcardPattern> ::= "_"

<consPattern> ::= <pattern> "|" <pattern>

<patternVariable> ::= <variable>

<functionPattern> ::= <functionName> "(" <patternList> ")"

<patternList> ::= <pattern> ("," <pattern>)* | /* empty */

<variable> ::= <capitalLetter> <variableTail>*

<variableTail> ::= <letter> | <digit>

<integer> ::= <digit>+

<float> ::= <digit>+ "." <digit>+

<string> ::= "\"" <stringChar>* "\""

<stringChar> ::= any character except double quote or backslash | "\\" <escapedChar>

<escapedChar> ::= "\"" | "\\" | "n" | "r" | "t"

<atom> ::= <unquotedAtom> | <quotedAtom>

<unquotedAtom> ::= <smallLetter> <identifierTail>*

<quotedAtom> ::= "'" <quotedAtomChar>* "'"

<quotedAtomChar> ::= any character except single quote or backslash | "\\" <escapedChar>

<list> ::= "[" (<expressionPrecedenceLevel_0> ("," <expressionPrecedenceLevel_0>)*)? "]"

<tuple> ::= "{" (<expressionPrecedenceLevel_0> ("," <expressionPrecedenceLevel_0>)*)? "}"

<map> ::= "#{" (<mapEntry> ("," <mapEntry>)*)? "}"

<mapEntry> ::= <expressionPrecedenceLevel_0> "=>" <expressionPrecedenceLevel_0>

<binary> ::= "<<" (<binaryElement> ("," <binaryElement>)*)? ">>"

<binaryElement> ::= <expressionPrecedenceLevel_0> (":" <size>)? ("/" <type>)?

<size> ::= <integer>

<type> ::= "integer" | "float" | "binary" | "bitstring" | "bytes" | "bits" | "utf8" | "utf16" | "utf32" | "signed" | "unsigned" | "big" | "little" | "native"

<pid> ::= "<" <pidContent> ">"

<pidContent> ::= <digit>+ ("." <digit>+)*

<port> ::= "#Port<" <digit>+ ">"

<reference> ::= "#Ref<" <digit>+ ">"

<funExpression> ::= "fun" <functionClauses> "end"

<ifExpression> ::= "if" <ifClause>+ "end"

<ifClause> ::= <guardExpression> "->" <expressionPrecedenceLevel_0> ";"

<caseExpression> ::= "case" <expressionPrecedenceLevel_0> "of" <caseClause>+ "end"

<caseClause> ::= <pattern> "->" <expressionPrecedenceLevel_0> ";"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<letter> ::= <capitalLetter> | <smallLetter>

<smallLetter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"

<capitalLetter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<identifierTail> ::= <letter> | <digit> | "_"


