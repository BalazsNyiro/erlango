# read this: "https://www.erlang.org/doc/system/data_types.html#atom"
##################################################################

# TODO for later: add try/catch structure for error handling


# ========== expression   =====================
<program> ::= <dashPrgAttrib> <program>
            | <functionDefinition> <programTail>

# -module("abc")
<dashPrgAttrib> ::= "-" <atom> "(" <dashArg> ")" "."
<dashArg> ::= <string>
            | <exportList>

<programTail> ::= <functionDefinition> <programTail>
                | <empty>

<exportList> ::= "[" <exportEntryList> "]"

<exportEntryList> ::= <exportEntry> <exportEntryListTail>
                    | <empty>

<exportEntryListTail> ::= "," <exportEntry> <exportEntryListTail>
                        | <empty>

<exportEntry> ::= <atom> "/" <integer>




# ========== expression   =====================

<functionDefinition> ::= <functionName> "(" <parameterList> ")" "->" <expression> "."

<functionName> ::= <identifier>

<parameterList> ::= <identifier> <parameterListTail>
                  | <empty>

<parameterListTail> ::= "," <identifier> <parameterListTail>
                      | <empty>

<expression> ::= <expression> "+" <term>
               | <expression> "-" <term>
               | <expression> "=" <term>
               | <expression> "==" <term>
               | <expression> "/=" <term>
               | <expression> "=:=" <term>
               | <expression> "=/=" <term>
               | <expression> "<" <term>
               | <expression> "=<" <term>
               | <expression> ">" <term>
               | <expression> ">=" <term>
               | <expression> "++" <term>
               | <expression> "--" <term>
               | <expression> "!" <term>
               | <term>

<term> ::= <term> "*" <factor>
         | <term> "/" <factor>
         | <factor>

<factor> ::= <number>
           | <string>
           | <atom>
           | <identifier>
           | <functionCall>
           | "(" <expression> ")"
           | <caseExpression>
           | <list>
           | <map>
           | <pid>





# ======  FUNCTIONS ========
<functionCall> ::= <functionName> "(" <argumentList> ")"

<argumentList> ::= <expression> <argumentListTail>
                 | <empty>

<argumentListTail> ::= "," <expression> <argumentListTail>
                     | <empty>

<identifier> ::= <letter> <identifierTail>

<identifierTail> ::= <letterOrDigit> <identifierTail>
                   | <empty>

# ========== CASE =====================
<caseExpression> ::= "case" <expression> "of" <caseClauseList> "end"

<caseClauseList> ::= <caseClause> <caseClauseTail>

<caseClauseTail> ::= <caseClause> <caseClauseTail>
                   | <empty>

<caseClause> ::= <pattern> "->" <expression> ","
               | <pattern> "->" <expression>

<pattern> ::= <identifier>
            | <number>
            | <string>
            | <atom>
            | <list>
            | <tuple>
            | <map>
            | <pid>


# ========== erlang_types_=====================
<tuple> ::= "{" <expressionList> "}"
<list> ::= "[" <expressionList> "]"

<expressionList> ::= <expression> <expressionListTail>
                   | <empty>

<expressionListTail> ::= "," <expression> <expressionListTail>
                       | <empty>

<map> ::= "#{" <mapEntryList> "}"

<mapEntryList> ::= <mapEntry> <mapEntryListTail>
                 | <empty>

<mapEntryListTail> ::= "," <mapEntry> <mapEntryListTail>
                     | <empty>

<mapEntry> ::= <expression> "=>" <expression>

<pid> ::= "<" <integer> "." <integer> "." <integer> ">"



<string> ::= <stringQuoteOne> | <stringInSigil>
<stringQuoteOne> ::= "\"" <stringQuoteOneTail> "\""
<stringQuoteOneTail> ::=  <anyUnicodeCharsExceptNonEscapedSingleQuote> | <empty>

<stringInSigil> ::= "\"\"\"" <stringSigilTail> "\"\"\""
<stringSigilTail> ::=  <anyUnicodeChars> | <empty>

<atom> ::= <atomInQuotes> | <atomSmallFirstChar>
<atomSmallFirstChar> ::= <letterSmall> <atomSmallFirstChar_tail>
<atomSmallFirstChar_tail> ::= <letterOrDigitOrUnderscoreOrAtSign> <atomSmallFirstChar_tail>
                            | <empty>

<atomInQuotes> ::= "'" <atomCharList_inQuotes> "'"
<atomCharList_inQuotes> ::= <anyUnicodeChars> <atomCharList_inQuotes>
                          | <empty>

<number> ::= <integer> | <float>
<integer> ::= <digit> <numberTail>
<float> ::= <digit> <numberTail> "." <digit> <numberTail>

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"



# ===============_comment_section_abc_=====================
# TODO: all unicode char has to be accepted, except , handle this in the parser
<anyUnicodeChars> ::= <letterOrDigitOrUnderscoreOrAtSign>

# TODO: all unicode char has to be accepted, handle this in the parser
<anyUnicodeCharsExceptNonEscapedSingleQuote> ::= <letterOrDigitOrUnderscoreOrAtSign>

<escapeSequence> ::= "\\" <escapeChar>
<escapeChar> ::= "n" | "t" | "\\" | "\"" | "'"

<letterOrDigitOrUnderscoreOrAtSign> ::= <letterSmallCapital>
                                      | <digit>
                                      | "_" | "@"

<letterSmallCapital> ::= <letterSmall>
                      | <letterCapital>

<letterSmall> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j"
                | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
                | "u" | "v" | "w" | "x" | "y" | "z"

<letterCapital> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
                  | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T"
                  | "U" | "V" | "W" | "X" | "Y" | "Z"

<empty> ::=   /* nothing */
