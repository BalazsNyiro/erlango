<module> ::= <moduleAttribute>* <functionDefinition>+ ;

<moduleAttribute> ::= "-module" "(" <atom> ")" "." ;

<functionDefinition> ::= <functionName> "(" <parameterList> ")" <guard>? "->" <expressionPrecedenceLevel_0> "." ;

<functionName> ::= <smallLetter> <identifierTail>* ;

<parameterList> ::= <pattern> ("," <pattern>)* | /* empty */ ;

<pattern> ::= <variable>
            | <number>
            | <atom>
            | <string>
            | <tuple>
            | <list>
            | <map>
            | <record>
            | <wildcard>
            | <functionDefinition> /* function as variable */
            ;

<guard> ::= "when" <guardExpression> ;

<guardExpression> ::= <guardExpression> "andalso" <guardExpression>
                    | <guardExpression> "orelse" <guardExpression>
                    | "not" <guardExpression>
                    | <guardPrimary> ;

<guardPrimary> ::= <variable>
                 | <boolean>
                 | <comparison>
                 | <functionCall> ;

<boolean> ::= "true" | "false" ;

<comparison> ::= <expressionPrecedenceLevel_0> <compOperator> <expressionPrecedenceLevel_0> ;

<compOperator> ::= "==" | "/=" | "<" | "<=" | ">" | ">=" ;

<expressionPrecedenceLevel_0> ::= <expressionPrecedenceLevel_0> "+" <expressionPrecedenceLevel_1>
                               |  <expressionPrecedenceLevel_0> "-" <expressionPrecedenceLevel_1>
                               |  <expressionPrecedenceLevel_0> " " <expressionPrecedenceLevel_1>    /* String concatenation */
                               |  <expressionPrecedenceLevel_1> ;

<expressionPrecedenceLevel_1> ::= <expressionPrecedenceLevel_1> "*" <expressionPrecedenceLevel_2>
                               |  <expressionPrecedenceLevel_1> "/" <expressionPrecedenceLevel_2>
                               |  <expressionPrecedenceLevel_2> ;

<expressionPrecedenceLevel_2> ::= <unaryExpression> ;

<unaryExpression> ::= "+" <unaryExpression>
                    |  "-" <unaryExpression>
                    |  <primaryExpression> ;

<primaryExpression> ::= "(" <expressionPrecedenceLevel_0> ")"
                      |  <number>
                      |  <variable>
                      |  <functionCall>
                      |  <tuple>
                      |  <list>
                      |  <map>
                      |  <record>
                      |  <binary>
                      |  <atom>
                      |  <string>
                      ;

<functionCall> ::= <functionName> "(" <argumentList> ")" ;

<argumentList> ::= <expressionPrecedenceLevel_0> ("," <expressionPrecedenceLevel_0>)* | /* empty */ ;

<number> ::= <integer> | <float> ;

<integer> ::= <digit>+ ;

<float> ::= <digit>+ "." <digit>+ ;

<variable> ::= <capitalLetter> <variableTail>* | <functionDefinition> ;

<variableTail> ::= <letter> | <digit> ;

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

<letter> ::= <capitalLetter> | <smallLetter> ;

<smallLetter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;

<capitalLetter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;

<atom> ::= <smallLetter> <identifierTail>* | "'" <atomChars> "'" ;

<atomChars> ::= /* any sequence of characters except single quote */ ;

<string> ::= "\"" <stringChars> "\"" ;

<stringChars> ::= /* any sequence of characters except double quote */ ;

<tuple> ::= "{" <expressionPrecedenceLevel_0> ("," <expressionPrecedenceLevel_0>)* "}" ;

<list> ::= "[" <expressionPrecedenceLevel_0> ("," <expressionPrecedenceLevel_0>)* "]"
         | "[" <expressionPrecedenceLevel_0> "|" <expressionPrecedenceLevel_0> "]" ; /* cons */

<map> ::= "#{" <mapEntry> ("," <mapEntry>)* "}" ;

<mapEntry> ::= <expressionPrecedenceLevel_0> "=>" <expressionPrecedenceLevel_0> ;

<record> ::= "#" <atom> "{" <recordField> ("," <recordField>)* "}" ;

<recordField> ::= <atom> "=" <expressionPrecedenceLevel_0> ;

<binary> ::= "<<" <binaryItem> ("," <binaryItem>)* ">>" ;

<binaryItem> ::= <expressionPrecedenceLevel_0> ;

<wildcard> ::= "_" ;

<comment> ::= "%" <anyCharExceptNewline>* ;

<!-- Control structures -->

<ifExpression> ::= "if" <guardExpression> "->" <expressionPrecedenceLevel_0> (";" <guardExpression> "->" <expressionPrecedenceLevel_0>)* "end" ;

<caseExpression> ::= "case" <expressionPrecedenceLevel_0> "of" <caseClause>+ "end" ;

<caseClause> ::= <pattern> "->" <expressionPrecedenceLevel_0> ";"? ;

<!-- Additional control flow -->

<receiveExpression> ::= "receive" <receiveClauses>? "after" <number> "->" <expressionPrecedenceLevel_0> "end" ;

<receiveClauses> ::= <receiveClause>+ ;

<receiveClause> ::= <pattern> "when" <guardExpression>? "->" <expressionPrecedenceLevel_0> ";"? ;

<tryCatchExpression> ::= "try" <expressionPrecedenceLevel_0> "of" <tryClause>+ "catch" <catchClause>+ "end" ;

<tryClause> ::= <pattern> "->" <expressionPrecedenceLevel_0> ";"? ;

<catchClause> ::= <pattern> "->" <expressionPrecedenceLevel_0> ";"? ;

<!-- Macros -->

<macroDefinition> ::= "-define" "(" <atom> "," <expressionPrecedenceLevel_0> ")" "." ;


