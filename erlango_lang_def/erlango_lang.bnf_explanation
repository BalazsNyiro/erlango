== Module System ==

Module declarations with -module(Name).

Supports multiple module attributes (expandable for includes, exports, etc.)

== Functions ==

Function definitions with Erlang-style -> arrow and clause termination .

Multiple function clauses with optional guards (when)

Parameters accept patterns, supporting complex matching

Functions can be assigned to variables (anonymous functions)

== Pattern Matching ==

Variables, literals (numbers, atoms, strings)

Complex patterns: tuples {}, lists [], maps #{}, records #record{}, wildcards _

Patterns usable in function parameters, case clauses, receive clauses

== Data Types ==

Simple: integer, float, string, atom (quoted and unquoted)

Complex: tuple, list (including cons form [Head | Tail]), map, record, binary (<<>>)

Records include field assignments

Binaries support comma-separated items

== Expressions & Operators ==

Arithmetic: +, -, *, / with unary support

String concatenation via " " operator

List cons operator |

Comparisons: ==, /=, <, <=, >, >=

Boolean operations in guards: andalso, orelse, not

Parentheses for grouping

== Control Structures ==

if expressions with multiple guards and clauses, ending with end

case expressions with pattern matching clauses

receive blocks for message handling with optional timeout

try-catch blocks for error handling

== Guards ==

Boolean expressions combining comparisons and function calls

Support for logical operators (andalso, orelse, not)

Guards on function clauses, case clauses, receive clauses

== Macros ==

Basic macro definitions with -define(Name, Value).

Limited to syntax, no complex macro expansions modeled yet

== Comments ==

Single-line comments using %

== Records ==

Syntax for record creation and pattern matching

Field assignments inside {}

== Binaries ==

Support for binary construction with << >>

Multiple binary items separated by commas

== Anonymous Functions ==

Functions can appear as values and assigned to variables

Supports passing functions as parameters or returning them


